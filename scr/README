README
======

Upload Scripts
--------------

1.  Flash the latest NodeMCU firmware with esptool.py, can be found here:
    https://github.com/pfalcon/esptool/blob/master/esptool.py

    $ esptool.py --port $UART_PORT write_flash 0x0 $BIN_FILE

e.g.
    $ esptool.py --port /dev/cu.usbserial-00001014 write_flash 0x0 ~/Desktop/nodemcu_float_0.9.6-dev_20150704.bin

2.  Upload scripts with nodemcu-uploader.py, from:
    https://github.com/kmpm/nodemcu-uploader.git

    $ nodemcu-uploader.py --port $UART_PORT --baud $BAUD upload $FILE

e.g.
    $ nodemcu-uploader.py --port /dev/ttyUSB0 --baud 115200 upload lsap.lua

    or uploading all the files in one shot:

    $ nodemcu-uploader.py --port /dev/ttyUSB0 --baud 115200 upload `ls *.lua` `ls http/*`

Ps:
    Alternatively, we can also use luatool.py for single file upload:
    $ luatool.py -p /dev/cu.usbserial-A503TUYM -b 115200 -f work.lua -t work.lua

Run Test
--------

    > dofile("test.lua")

Working Modes
-------------

    ACTIVE: Normal working mode that act as STA or AP.
            (e.g. exchange data with server and then sleep)

    SLEEP:  Deep sleep at most times, waking up at intervals.
            (e.g. sleep 1 min and wake up for 3 sec)

    DEBUG:  Nothing runs, except for the lua prompt itself.

    Since we are on battery all the time, we need the capability to
switch among different modes according to one single user button,
and keep the battery lasting as long as possible at the same time.

    Thus, to achieve all three states ACTIVE, SLEEP and DEBUG, we
designed this flow which can be described as:

       Boot
        |
        v
 button pressed? ---+
      Y |         N |
        v           |
 toggle flag_dsleep |
        |           |
        + <---------+
        |
        v
 flag_dsleep == false? ---+
      Y |               N |
        v                 v
     ACTIVE        button pressed? ---+
                        Y |         N |
                          v           v
                        DEBUG       SLEEP
